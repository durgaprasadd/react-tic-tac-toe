{"version":3,"sources":["player.js","index.js"],"names":["Player","name","symbol","Object","classCallCheck","this","moves","move","push","winningChances","_this","some","set","every","x","includes","concat","Game","props","possibleConstructorReturn","getPrototypeOf","call","players","state","grids","turn","getCurrentPlayerTurn","hasWon","winningMoves","getTurn","id","rowIndex","Math","floor","cellIndex","getCurrentPlayer","getSymbol","event","_this2","target","setState","currentPlayer","getSymbolInBoard","addMove","addSymbolToBoard","reverse","isWon","row","map","cell","react_default","a","createElement","_this3","createCell","onclick","update","bind","message","getWonMessage","isGameDraw","onClick","createRow","printBoard","React","Component","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.14c9e165.chunk.js","sourcesContent":["class Player {\n  constructor(name, symbol) {\n    this.name = name;\n    this.symbol = symbol;\n    this.moves = [];\n  }\n  addMove(move) {\n    this.moves.push(move);\n  }\n  isWon(winningChances) {\n    return winningChances.some(set => set.every(x => this.moves.includes(x)));\n  }\n  getTurn() {\n    return `${this.name}'s turn`;\n  }\n  getWonMessage() {\n    return `${this.name} won!`\n  }\n  getSymbol() {\n    return this.symbol;\n  }\n}\n\nexport default Player;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Player from './player.js'\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.players = props.players;\n    this.state = { grids: [['', '', ''], ['', '', ''], ['', '', '']], turn: this.getCurrentPlayerTurn() };\n    this.hasWon = false;\n    this.winningMoves = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  }\n\n  getCurrentPlayer() {\n    return this.players[0]\n  }\n\n  getCurrentPlayerTurn() {\n    return this.players[0].getTurn();\n  }\n\n  addSymbolToBoard(grids, id) {\n    const rowIndex = Math.floor(id / 3);\n    const cellIndex = id - (rowIndex * 3);\n    grids[rowIndex][cellIndex] = this.getCurrentPlayer().getSymbol();\n  }\n\n  getSymbolInBoard(grids, id) {\n    const rowIndex = Math.floor(id / 3);\n    const cellIndex = id - (rowIndex * 3);\n    return grids[rowIndex][cellIndex]\n  }\n\n  update(event) {\n    const id = +event.target.id;\n    this.setState(state => {\n      const { grids } = state;\n      const currentPlayer = this.getCurrentPlayer();\n      if (!this.getSymbolInBoard(grids, id)) {\n        currentPlayer.addMove(id);\n        this.addSymbolToBoard(grids, id)\n        this.players.reverse();\n      }\n      this.hasWon = currentPlayer.isWon(this.winningMoves);\n      const turn = this.getCurrentPlayerTurn();\n      return { grids, turn }\n    });\n  }\n\n  isGameDraw() {\n    return this.state.grids.every(set => set.every(x => x));\n  }\n\n  createCell(row, rowIndex) {\n    return row.map((cell, cellIndex) => <td id={rowIndex * 3 + cellIndex} >{cell}</td>);\n  }\n\n  createRow(grids) {\n    const table = grids.map((row, rowIndex) => <tr>{this.createCell(row, rowIndex)}</tr>);\n    return table;\n  }\n  printBoard() {\n    let onclick = this.update.bind(this);\n    let message = <h1>{this.state.turn}</h1>\n    if (this.hasWon) {\n      onclick = null;\n      message = <h1>{this.players[1].getWonMessage()}</h1>\n    }\n    if (this.isGameDraw()) {\n      message = <h1>Game has drawn!</h1>\n    }\n    return <div>{message}<table onClick={onclick}><tbody>{this.createRow(this.state.grids)}</tbody></table></div>;\n  }\n\n  render() {\n    return this.printBoard();\n  }\n}\nconst player1 = new Player(\"Prasanth\", \"X\");\nconst player2 = new Player(\"Leela\", \"O\");\nconst players = [player1, player2];\nReactDOM.render(<Game players={players} />, document.getElementById(\"root\"));"],"sourceRoot":""}